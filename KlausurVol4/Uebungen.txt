----------------------------------------------
die verschiedenen Rechengesetze der Logik sind gegeben
---------------------------------------------- https://www.youtube.com/watch?v=DoQFR1a6BOY&t
disjunk: verbinden mit n, neuer term mit v
konjunk: werte invertieren, verbinden mit v, neuer term mit n
---------------------------------------------- https://www.binaryhexconverter.com/
Binaer(bas2):
	Dec(bas10) --> bin(bas2) | uses 0-1
	wenn zahl < 2, keine konvertierung nötig |  Teile den Wert durch 2, nimm den ganzzahligen Wert und teil ihn weiter bis 0 raus kommt. state of Rest gibt 0 || 1 an, von unten nach oben lesen für ergebnis
	
	55 / 2 = 27.5 --> 27	|	1 (es gibt nen Rest)
	27 / 2 = 13.5 --> 13	|	1
	13 / 2 = 6.5  --> 6		|	1
	 6 / 2 = 3    --> 3		|	0 (es gibt kein Rest)
	 3 / 2 = 1.5  --> 1		|	1
	 1 / 2 = 0.5  --> 0		|	1
	--> 55(bas10) ==> 110111(bas2)
--------------------------------------------- https://www.binaryhexconverter.com/
Octal(bas8)
	Dec(bas10) --> oct(bas8) | uses 0-7
	wenn zahl <8 keine konvertierung nötig | konvertiere zu binär, mach 3er päckchen. nimm die dargestellte (bas10) zahl und schreib bas8 dran. falls ein die 3päckchen nicht aufgehen, füge bei einem päckchen (vurzugsweise das letzte) eine leitende 0 an, sollte keinen unterschied machen.

	55(bas10) --> 110111(bas2) --> 110(bas2) 111(bas2) --> 76(bas8)

	oder:
	teile /8, nimm rest *8 --> aufschreiben, wiederholen mit ganzer Zahl (nicht runden,einfach abschneiden...), von unten nach oben aufgeschriebenens lesen --> ergebnis

	55 / 8 = 6,875 --> 0,875 * 8 = 7	| 7
	6 < 8								| 6
	-->55(10) ==> 67(8)
--------------------------------------------- https://www.binaryhexconverter.com/
hexa(bas16)
	Dec(10) --> Hexa(16) | uses 1-F [0,1...8,9,A,B...E,F]
	wenn zahl < 16 keine konvertierung nötig | teile zahl durch 16, nimm den rest (xx,REST) mal 16, diese zahl aufschreiben, weitermachen mit ganzer Zahl (xx); aufgeschriebene zahlen von unten nach oben sind das ergebnis (alles <9 in buchstaben konvertieren!)

	555 / 16 = 34,6875 --> 0,6875 * 16 = 11	| 11 --> B
	34 / 16 = 2,125 --> 0,125*16 = 2		|  2 --> 2
	2 < 16									|  2 --> 2
	--> 555(10) ==> 22B(16)
-----------------------
notiz: alle rechenvorgänge sind mit Modulo machbar:
	555 / 16  = ~34
	555 - 34 * 16 = 555 - 544 = 11

	555 % 16 = 11
	!Achtung, bei der letzten Zahl (x%y = 0) nur x/y = deine Zahl
--------------------------------------------- https://de.wikipedia.org/wiki/Festkommazahl#Rechnen_mit_Festkommazahlen
Festkomma Rechenregeln
	korrigierungen: 7,4 --> 7,4000000000; (falls 7,4 * 8,455 gilt: 7,400 * 8,455)

	selbe Regeln wie unsere Arithmetik: 
	+- --> position des kommas bleibt überall gleich
	*  --> nachkommastellen = nachkommastellen des ersten werts + nachkommastellen des 2ten werts
	/  --> ergibt das selbe, genauigkeit beachten! (du kannst keine bits hinzufügen) |||| ICH WEIS NICHT OB DAS STIMMT; BITTE GUCKT NOCHMAL SELBST...UND SAGT ES MIR DANN xD

	real: 5,25 + 7,48 = 12,73
	pc: 525 + 748 = 1273 --> 2 nachkommastellen --> 12,73

	real: 5,25 * 7,48 = 39,27
	pc: 525 * 748 = 392700 --> 2 * 2 nachkommastellen --> 39,2700

	real: 5,25 / 7,48 = 0,7018716577
	pc: 525 / 748 = 0,7018
--------------------------------------------- https://de.wikipedia.org/wiki/Festkommazahl#Probleme + Freddy
Festkomma vs Gleitkomma (Floating point)
	kleinere Genauigkeit als Gleitkomma (es gibt nur 1byte, wenn die Kommazahl weiter geht...pech gehabt, wird nichtmal beachtet [unterschied zu floatingpoint])
	dafür rechengünstiger aka (manchmal) schneller (wenn zahlen in bas2 bearbeitet werden, muss man nur kommas [pointer] schieben, fast nicht rechnen)

	festkomma kann in bestimmten fällen nicht alle nachkommastellen berücksichtigen, dabei gehen informationen verloren
	fließkomma stellt die rechnung so um, dass so wenig Informationen wie möglich verloren gehen (durch umstellung von kommas)
	mit festkomma lässt sich allgemein schneller rechnen
--------------------------------------------- https://www.youtube.com/watch?v=dLvvGXwKUGw
LZW
	komprimiere: "pressEFerRespekt" , ignoriere Groß/Klein-Schreibung

	mache wörterbuch:
	E = 1
	r = 2
	s = 3
	F = 4
	k = 5
	t = 6
	p = 7
	=neu=
	pr = 8
	re = 9
	es = 10
	ss = 11
	se = 12
	ef = 13
	fe = 14
	er = 15
	rr = 16
	sp = 17
	pe = 18
	ek = 19
	kt = 20

	sehe jeden buchstaben einzeln an, (und das video, sie erklärt es gut...)

	previousLetter	letter	value	output
					p  		
	p				r 		pr=8	7
	r				e 		re=9	2
	e				s 		es=10	1
	s				s 		ss=11	3
	s				e		se=12	3
	e				f		ef=13	1
	f				e 		fe=14	4
	e 				r 		er=15	1
	r 				r 		rr=16	2
	r 				e 		re 		2
	e 				s 		es 		9
	s 				p 		sp=17	10
	p 				e 		pe=18 	7
	e 				k 		ek=19	1
	k 				t 		kt=20	5
	t								6

	ergebnis = 7 2 1 3 3 1 4 1 2 2 9 10 7 1 5 6
----------------------------------------------
Automaten ^-^
	keller automat kennen aber nicht entwerfen 
	mealy ist der standard automat, eingabealphabet, bei tabelle ist das hinter / die Ausgabe, bei Graph auch (eher markiert durch ""); es gibt eine ausgabe ^-^
	Ein Mealy-Automat ist wie folgt definiert:
    - es gibt eine endliche Menge von Zuständen
    - genau einer der Zustände ist der Anfangszustand
    - es gibt ein Eingabealphabet mit endlich vielen Zeichen
    - es gibt ein Ausgabealphabet mit endlich vielen Zeichen
    - jedem möglichen Übergang von einem Zustand zu einem anderen Zustand ist eine eindeutige Kombination aus einem Zeichen des Eingabealphabets und einem Zeichen des Ausgabealphabets zugeordnet.
	- kein zwang für endzustand

	siehe pdf (https://schillgymoffenburg.sharepoint.com/:b:/s/J1Inf1SJ2223/EdSghcgWbu5JvO88yzEnWu0BfGlIp5IHlwp3dhuQsEyk5A?e=AZXdY0)
			loes: (https://schillgymoffenburg.sharepoint.com/:b:/s/J1Inf1SJ2223/ES7SXNY-Q7dJlAU65fCyiF8BWo23rq__xNYhVMZRzpJ3Og?e=Ir7TYI)

	E(ingabealphabet) = {A,M,D,5,6}
	q0 --A---> q1 --M--> q2 --D--> q3 --6--> q4
									  --5--> q0

	Zustand		Eingaben
				A		M		D		5		6
	q0			q1/A	-		-		-		-
	q1			-		q2/M 	-		-		-
	q2			-		-		q3/D	-		-
	q3			-		-		-		q0/5	q4/6
	q4			-		-		-		-		-	

	Mögliche Ausgaben:
	AMD5555555...6
	AMD56
	AMD5556
----------------------------------------------
ReGGex(e.de)
	ausprobieren, weiß ich auch nicht mehr...
	befehle: (http://regexe.de/hilfe.jsp) | zeilenweise an

000111
005012
95468524
0
0

111005
05104252
101100101

	filtere alle binären raus...
	[01][01]*+$
----------------------------------------------
0000000000000000000000000000000000000000000000
0000000001100000000000000000110000000000000000
0000000001100000000000000000110000000000000000
0000000001100000000000000000110000000000000000
0000000001100000000000000000110000000000000000
0000000001100000000000000000110000000000000000
0000000001100000000000000000110000000000000000
0000000000000000000000000000000000000000000000
0000011100000000000000000000000000011100000000
0000001110000000000000000000000001110000000000
0000000011100000000000000000000111000000000000
0000000000111000000000000000011100000000000000
0000000000001111111111111111110000000000000000
0000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000
----------------------------------------------
/////////////////Aufgaben/////////////////////
----------------------------------------------
0)
		AB	-AB	-A-B	A-B
	CD	0	0	0	0
	-CD	1	1	0	0
	-C-D	1	1	1	1
	C-D	0	0	0	0

	-->Forme Disjunktive und Konjunktive normalform ^^

1)
	1575(10) zu (2) und (8) und (16)

2)
	Festkomma: 2.20005+8.05
	Festkomma: 2.20005*8.05
	Festkomma: 2.20005/8.08

3)
	Warum ist Festkomma besser, wenn ihr einen IntelPotato habt? Wann ist Fließkomma besser.

4)
	Dieser Satz ist zu lang. Änder das.

5)
	mach ne tabelle hier raus (+mögliche Ausgaben):
	E = {S,T,D,F,69}
	q0 --S/"why"--> q1 --T/"do"--> q2 --D/"hurt"--> q3 --F/"like"--> q0
									 --69/"that"--> q2
				
6)
	selbe aufgabenstellung wie 5):
		A			B				C 
	q0	q1/"Help"	q2/"Gandalf"	q2/"Fuck"
	q1	q2/"me"		q0/"Klopapier"	q0/"Ezekiel"
	q2	q0/"Fucker"	q1/"braucht"	q1/"you"
	
7)
Filtere alle A's raus:
AJAAAAAAAAAAAAA
AAAAOAAAMAAAAAA
AAOAAAAAAAIAAAA
AAAAAANAAAAAAAA
AAAA'AAA-AAA'AA

8)
Select alle Hex-Zahlen:
000 100 G55 9AF
011 R22 165 


------------------------------------------------ 
////////////////Loesung/////////////////////////
------------------------------------------------
0)
	dis: (B n -C) v (-C n -D) = -C n (B v -D)
	kon: (B v -D) n -C

1)
	(8):
	1575 / 8 = 196,875 | 0,875 * 8 = 7
	196 / 8 = 24,5 	   | 0,5 * 4 = 2
	24 / 8 = 3         | 3

	1575(10) = 327(8)

	(16):
	~(x/y): kappt alle kommastellen der  Rechnung ab
	1575 % 16 = 1575 - (~(1575 / 16) * 16) = 7 | 7
	98 % 16 = 98 - (~(98/16) * 16) = 2		   | 2
	98 / 16 = 6 < 16 = 6					   | 6
 

	1575(10) = 627(16)

2)
	Festkomma: 2.20005+8.05
	2.20005 + 8.05000 = 220005 + 805000 = 1025005 = 10.25005

	Festkomma: 2.20005*8.05
	2.20005*8.05000 = 220005 * 805000 = 17.71040
	
	Festkomma: 2.20005 / 8.08
	2.20005 / 8.80000 = 220008 / 880000 = 2.5000

3)
	Festkomma braucht weniger Rechenleistung als Gleitkomma, da keine weiteren Kommastellen "erzeugt" werden müsssen 
	binäre Festkommazahlen erfordern nur pointer Verschiebungen 

	Fließkomma sind für Genauigkeit besser (und durch Flieskomma-Rechenzentren auf CPUs heutzutage insgesam performanter)

4)
	DieserSatzIstZuLang
	A = 1
	E = 2
	D = 3
	i = 4
	S = 5
	r = 6
	T = 7
	u = 8
	L = 9
	n = 10
	g = 11
	z = 12
	==neu==
	siehe code, ich bin faul...

	previous	letter	code	OUT
				d 				
	d 			i 		di=13	3
	i 			e 		ie=14	4
	e 	 		s		es=15	2
	s 			e 		se=16	5
	e 			r 		er=17	2
	r 			s 		rs=18	6
	s 			a 		sa=19	5
	a 			t 		at=20	1
	t 			z 		tz=21	7
	z 			i 		zi=22 	12
	i 			s 		is=23	4
	s 			t 		st=24 	5
	t 			z 		tz		7
	tz 			u 		tzu=25	21
	u 			l 		ul=26	8
	l 			a 		la=27 	9
	a 			n		an=28 	1
	n 			g 		ng=29	10
	g 							11

	"kürzer": 3 4 2 5 2 6 5 1 7 12 4 5 7 21 8 9 1 10 11 
	(bitte macht ein beispiel das man komprimieren kann...ich bin anscheinend kacke darin)

5)
		S			T			D			F		 	69
	q0	q1/"Why"	-			-			-			-
	q1	-			q2/"do"		-			-			-
	q2	-			-			q3/"hurt"	-			-
	q3	-			-			-			q0/"like"	q2/"that"	

	mögliche Ausgaben:
	Why do hurt that [do hurt that] wiederholungen... like [why do hurt [like || that]]
	Why do hurt like why do hurt like ....you get Ir7TYI

6)
	siehe einziger Bild in diesem Ordner

	mögliche Aussagen: yes, einfach yes, schickt die in discord rein, ich überprüfe die...oder es funkt einfach

7)
	eine mögliche lösung: [B-Z][^A]*

8)
	keine korrekte möglichkeit, ich wechsel nur schnell den PC: [0-9[A-F]]*

------------------------------------------------	
////////////////Contributors////////////////////
------------------------------------------------
	-Freddy























































A: AAAAAAAAAAA
B: gelernt
C: kernelPanik

A -------
	 |XOR----
B --not--	 |
		 |----OUT
C --------------

OUT: Hier läuft alles supppaaaa （´・ω・ `）
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ╔͎═͓═͙╗
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ╚̨̈́═̈́﴾ ̥̂˖̫˖̥  ̂ )