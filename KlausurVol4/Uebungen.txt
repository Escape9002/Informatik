----------------------------------------------
die verschiedenen Rechengesetze der Logik sind gegeben
---------------------------------------------- https://www.youtube.com/watch?v=DoQFR1a6BOY&t
disjunk: verbinden mit n, neuer term mit v
konjunk: werte invertieren, verbinden mit v, neuer term mit n
---------------------------------------------- https://www.binaryhexconverter.com/
Binaer(bas2):
	Dec(bas10) --> bin(bas2) | uses 0-1
	wenn zahl < 2, keine konvertierung nötig |  Teile den Wert durch 2, nimm den ganzzahligen Wert und teil ihn weiter bis 0 raus kommt. state of Rest gibt 0 || 1 an, von unten nach oben lesen für ergebnis
	
	55 / 2 = 27.5 --> 27	|	1 (es gibt nen Rest)
	27 / 2 = 13.5 --> 13	|	1
	13 / 2 = 6.5  --> 6		|	1
	 6 / 2 = 3    --> 3		|	0 (es gibt kein Rest)
	 3 / 2 = 1.5  --> 1		|	1
	 1 / 2 = 0.5  --> 0		|	1
	--> 55(bas10) ==> 110111(bas2)
--------------------------------------------- https://www.binaryhexconverter.com/
Octal(bas8)
	Dec(bas10) --> oct(bas8) | uses 0-7
	wenn zahl <8 keine konvertierung nötig | konvertiere zu binär, mach 3er päckchen. nimm die dargestellte (bas10) zahl und schreib bas8 dran. falls ein die 3päckchen nicht aufgehen, füge bei einem päckchen (vurzugsweise das letzte) eine leitende 0 an, sollte keinen unterschied machen.

	55(bas10) --> 110111(bas2) --> 110(bas2) 111(bas2) --> 76(bas8)

	oder:
	teile /8, nimm rest *8 --> aufschreiben, wiederholen mit ganzer Zahl (nicht runden,einfach abschneiden...), von unten nach oben aufgeschriebenens lesen --> ergebnis

	55 / 8 = 6,875 --> 0,875 * 8 = 7	| 7
	6 < 8								| 6
	-->55(10) ==> 67(8)
--------------------------------------------- https://www.binaryhexconverter.com/
hexa(bas16)
	Dec(10) --> Hexa(16) | uses 1-F [0,1...8,9,A,B...E,F]
	wenn zahl < 16 keine konvertierung nötig | teile zahl durch 16, nimm den rest (xx,REST) mal 16, diese zahl aufschreiben, weitermachen mit ganzer Zahl (xx); aufgeschriebene zahlen von unten nach oben sind das ergebnis (alles <9 in buchstaben konvertieren!)

	555 / 16 = 34,6875 --> 0,6875 * 16 = 11	| 11 --> B
	34 / 16 = 2,125 --> 0,125*16 = 2		|  2 --> 2
	2 < 16									|  2 --> 2
	--> 555(10) ==> 22B(16)  
--------------------------------------------- https://de.wikipedia.org/wiki/Festkommazahl#Rechnen_mit_Festkommazahlen
Festkomma Rechenregeln
	korrigierungen: 7,4 --> 7,4000000000; (falls 7,4 * 8,455 gilt: 7,400 * 8,455)

	selbe Regeln wie unsere Arithmetik: 
	+- --> position des kommas bleibt überall gleich
	*  --> nachkommastellen = nachkommastellen des ersten werts + nachkommastellen des 2ten werts
	/  --> ergibt das selbe, genauigkeit beachten! (du kannst keine bits hinzufügen) |||| ICH WEIS NICHT OB DAS STIMMT; BITTE GUCKT NOCHMAL SELBST...UND SAGT ES MIR DANN xD

	real: 5,25 + 7,48 = 12,73
	pc: 525 + 748 = 1273 --> 2 nachkommastellen --> 12,73

	real: 5,25 * 7,48 = 39,27
	pc: 525 * 748 = 392700 --> 2 * 2 nachkommastellen --> 39,2700

	real: 5,25 / 7,48 = 0,7018716577
	pc: 525 / 748 = 0,7018
--------------------------------------------- https://de.wikipedia.org/wiki/Festkommazahl#Probleme + Freddy
Festkomma vs Gleitkomma (Floating point)
	kleinere Genauigkeit als Gleitkomma (es gibt nur 1byte, wenn die Kommazahl weiter geht...pech gehabt, wird nichtmal beachtet [unterschied zu floatingpoint])
	dafür rechengünstiger aka (manchmal) schneller (wenn zahlen in bas2 bearbeitet werden, muss man nur kommas [pointer] schieben, fast nicht rechnen)

	festkomma kann in bestimmten fällen nicht alle nachkommastellen berücksichtigen, dabei gehen informationen verloren
	fließkomma stellt die rechnung so um, dass so wenig Informationen wie möglich verloren gehen (durch umstellung von kommas)
	mit festkomma lässt sich allgemein schneller rechnen
--------------------------------------------- https://www.youtube.com/watch?v=dLvvGXwKUGw
LZW
	komprimiere: "pressEFerRespekt" , ignoriere Groß/Klein-Schreibung

	mache wörterbuch:
	E = 1
	r = 2
	s = 3
	F = 4
	k = 5
	t = 6
	p = 7
	=neu=
	pr = 8
	re = 9
	es = 10
	ss = 11
	se = 12
	ef = 13
	fe = 14
	er = 15
	rr = 16
	sp = 17
	pe = 18
	ek = 19
	kt = 20

	sehe jeden buchstaben einzeln an, (und das video, sie erklärt es gut...)

	previousLetter	letter	value	output
					p  		
	p				r 		pr=8	7
	r				e 		re=9	2
	e				s 		es=10	1
	s				s 		ss=11	3
	s				e		se=12	3
	e				f		ef=13	1
	f				e 		fe=14	4
	e 				r 		er=15	1
	r 				r 		rr=16	2
	r 				e 		re 		2
	e 				s 		es 		9
	s 				p 		sp=17	10
	p 				e 		pe=18 	7
	e 				k 		ek=19	1
	k 				t 		kt=20	5
	t								6

	ergebnis = 7 2 1 3 3 1 4 1 2 2 9 10 7 1 5 6
----------------------------------------------
Automaten ^-^
	keller automat kennen aber nicht entwerfen 
	mealy ist der standard automat, eingabealphabet
	siehe pdf (https://schillgymoffenburg.sharepoint.com/:b:/s/J1Inf1SJ2223/EdSghcgWbu5JvO88yzEnWu0BfGlIp5IHlwp3dhuQsEyk5A?e=AZXdY0)
			loes: (https://schillgymoffenburg.sharepoint.com/:b:/s/J1Inf1SJ2223/ES7SXNY-Q7dJlAU65fCyiF8BWo23rq__xNYhVMZRzpJ3Og?e=Ir7TYI)

	E(eingabealphabet) = {A,M,D,5,6}
	

----------------------------------------------
ReGGex(e.de)
	ausprobieren, weiß ich auch nicht mehr...
	befehle: (http://regexe.de/hilfe.jsp)
----------------------------------------------

----------------------------------------------


----------------------------------------------
/////////////////Aufgaben/////////////////////
----------------------------------------------
0)
		AB	-AB	-A-B	A-B
	CD	0	0	0	0
	-CD	1	1	0	0
	-C-D	1	1	1	1
	C-D	0	0	0	0

	-->Forme Disjunktive und Konjunktive normalform ^^

1)
	


------------------------------------------------ 
////////////////Loesung/////////////////////////
------------------------------------------------
0)
	dis: (B n -C) v (-C n -D) = -C n (B v -D)
	kon: (B v -D) n -C

1)

------------------------------------------------	
////////////////Contributors////////////////////
------------------------------------------------
	-Freddy























































A: AAAAAAAAAAA
B: gelernt
C: kernelPanik

A -------
	 |XOR----
B --not--	 |
		 |----OUT
C --------------

OUT: Hier läuft alles supppaaaa （´・ω・ `）
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ╔͎═͓═͙╗
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ╚̨̈́═̈́﴾ ̥̂˖̫˖̥  ̂ )